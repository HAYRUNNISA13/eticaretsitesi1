@model mvc_project.Models.AdminDashboardViewModel

@{
    ViewData["Title"] = "İstatistikler";

    var mostFavorited = Model.ProductStats.OrderByDescending(p => p.FavoriteCount).FirstOrDefault();
    var highestRated = Model.ProductStats.Where(p => p.ReviewCount > 0).OrderByDescending(p => p.AverageRating).FirstOrDefault();

    var categoryStats = Model.ProductStats
        .GroupBy(p => p.CategoryName)
        .Select(g => new
        {
            CategoryName = g.Key,
            TotalFavorites = g.Sum(x => x.FavoriteCount),
            AverageRating = g.Any(x => x.ReviewCount > 0) ? g.Where(x => x.ReviewCount > 0).Average(x => x.AverageRating) : 0
        })
        .OrderByDescending(c => c.TotalFavorites)
        .ToList();

    var categoryNamesJson = System.Text.Json.JsonSerializer.Serialize(categoryStats.Select(c => c.CategoryName));
    var favoritesJson = System.Text.Json.JsonSerializer.Serialize(categoryStats.Select(c => c.TotalFavorites));
    var ratingsJson = System.Text.Json.JsonSerializer.Serialize(categoryStats.Select(c => Math.Round(c.AverageRating, 2)));

    var orderCategoryNamesJson = System.Text.Json.JsonSerializer.Serialize(Model.CategoryOrderStats.Select(c => c.CategoryName));
    var orderTotalsJson = System.Text.Json.JsonSerializer.Serialize(Model.CategoryOrderStats.Select(c => c.TotalOrders));
    var returnReasonsJson = System.Text.Json.JsonSerializer.Serialize(Model.ReturnReasons.Select(r => r.Reason));
    var returnCountsJson = System.Text.Json.JsonSerializer.Serialize(Model.ReturnReasons.Select(r => r.Count));
    var returnedProductNamesJson = System.Text.Json.JsonSerializer.Serialize(Model.ProductReturns.Select(r => r.ProductName));
    var returnedProductCountsJson = System.Text.Json.JsonSerializer.Serialize(Model.ProductReturns.Select(r => r.ReturnCount));
}

@section Styles{
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
}

<h1 class="mb-4 text-center">Admin İstatistik Dashboard</h1>

<div class="container">

    <!-- Kartlar -->
    <div class="row g-4 mb-5 justify-content-center">
        <div class="col-md-3">
            <div class="card text-white bg-primary shadow">
                <div class="card-header fs-5">Toplam Ürün</div>
                <div class="card-body text-center">
                    <h2 class="display-4">@Model.ProductStats.Count</h2>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card text-white bg-danger shadow">
                <div class="card-header fs-5">En Çok Favori Alan Ürün</div>
                <div class="card-body">
                    @if (mostFavorited != null)
                    {
                        <h5>@mostFavorited.ProductName</h5>
                        <p>Kategori: <strong>@mostFavorited.CategoryName</strong></p>
                        <p><i class="bi bi-heart-fill"></i> Favori Sayısı: <strong>@mostFavorited.FavoriteCount</strong></p>
                    }
                    else
                    {
                        <p>Veri bulunamadı.</p>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card bg-warning shadow">
                <div class="card-header fs-5">En Yüksek Ortalama Puanlı Ürün</div>
                <div class="card-body">
                    @if (highestRated != null)
                    {
                        <h5>@highestRated.ProductName</h5>
                        <p>Kategori: <strong>@highestRated.CategoryName</strong></p>
                        <p>
                            Ortalama Puan: <strong>@highestRated.AverageRating.ToString("0.0")</strong>
                        </p>
                    }
                    else
                    {
                        <p>Veri bulunamadı.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Grafikler -->
    <div class="row mb-5">
        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-info text-white fs-5">Kategoriye Göre Favori Sayısı</div>
                <div class="card-body">
                    <canvas id="favChart"></canvas>
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-success text-white fs-5">Kategoriye Göre Ortalama Puan</div>
                <div class="card-body">
                    <canvas id="ratingChart"></canvas>
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-secondary text-white fs-5">Kategoriye Göre Sipariş Miktarı</div>
                <div class="card-body">
                    <canvas id="orderChart"></canvas>
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-danger text-white fs-5">En Çok İade Edilen Ürünler</div>
                <div class="card-body">
                    <canvas id="productReturnChart"></canvas>
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-4">
            <div class="card shadow">
                <div class="card-header bg-dark text-white fs-5">İade Nedenleri</div>
                <div class="card-body">
                    <canvas id="returnReasonChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const categoryNames = @Html.Raw(categoryNamesJson);
        const favorites = @Html.Raw(favoritesJson);
        const ratings = @Html.Raw(ratingsJson);
        const orderCategoryNames = @Html.Raw(orderCategoryNamesJson);
        const orderTotals = @Html.Raw(orderTotalsJson);
        const returnReasons = @Html.Raw(returnReasonsJson);
        const returnCounts = @Html.Raw(returnCountsJson);
        const returnedProducts = @Html.Raw(returnedProductNamesJson);
        const returnedCounts = @Html.Raw(returnedProductCountsJson);

        // Kategoriye göre favori sayısı (Bar)
        new Chart(document.getElementById('favChart'), {
            type: 'bar',
            data: {
                labels: categoryNames,
                datasets: [{
                    label: 'Toplam Favori Sayısı',
                    data: favorites,
                    backgroundColor: 'rgba(220, 53, 69, 0.7)',
                    borderColor: 'rgba(220, 53, 69, 1)',
                    borderWidth: 1,
                    borderRadius: 4
                }]
            },
            options: {
                responsive: true,
                plugins: { legend: { display: false }, tooltip: { enabled: true } },
                scales: { y: { beginAtZero: true, ticks: { stepSize: 1 } } }
            }
        });

        // Kategoriye göre ortalama puan (Bar)
        new Chart(document.getElementById('ratingChart'), {
            type: 'bar',
            data: {
                labels: categoryNames,
                datasets: [{
                    label: 'Ortalama Puan',
                    data: ratings,
                    backgroundColor: 'rgba(25, 135, 84, 0.7)',
                    borderColor: 'rgba(25, 135, 84, 1)',
                    borderWidth: 1,
                    borderRadius: 4
                }]
            },
            options: {
                responsive: true,
                plugins: { legend: { display: false }, tooltip: { enabled: true } },
                scales: { y: { beginAtZero: true, max: 5, ticks: { stepSize: 0.5 } } }
            }
        });

        // Kategoriye göre sipariş miktarı (Pie)
        new Chart(document.getElementById('orderChart'), {
            type: 'pie',
            data: {
                labels: orderCategoryNames,
                datasets: [{
                    label: 'Toplam Sipariş Miktarı',
                    data: orderTotals,
                    backgroundColor: orderCategoryNames.map((_, i) => `hsl(${i * 30}, 70%, 60%)`),
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: { legend: { position: 'bottom' }, tooltip: { enabled: true } }
            }
        });

        // En çok iade edilen ürünler (Doughnut)
        new Chart(document.getElementById('productReturnChart'), {
            type: 'doughnut',
            data: {
                labels: returnedProducts,
                datasets: [{
                    label: 'İade Sayısı',
                    data: returnedCounts,
                    backgroundColor: returnedProducts.map((_, i) => `hsl(${i * 40}, 60%, 65%)`),
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: { legend: { position: 'bottom' }, tooltip: { enabled: true } }
            }
        });

        // İade nedenleri (Pie)
        new Chart(document.getElementById('returnReasonChart'), {
            type: 'pie',
            data: {
                labels: returnReasons,
                datasets: [{
                    label: 'İade Nedeni Sayısı',
                    data: returnCounts,
                    backgroundColor: returnReasons.map((_, i) => `hsl(${i * 50}, 70%, 70%)`),
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: { legend: { position: 'bottom' }, tooltip: { enabled: true } }
            }
        });
    </script>
}
